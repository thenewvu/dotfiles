--exclude=.git
--sort=no
--excmd=number
--c-kinds=cdefvgmpstu

--langmap=c:+.m
--langmap=c:+.mm
--regex-c=/\@interface[[:space:]]+([[:alnum:]_]+)/\1/i,interface/
--regex-c=/\@implementation[[:space:]]+([[:alnum:]_]+)/\1/I,implementation/
--regex-c=/\@protocol[[:space:]]+([[:alnum:]_]+)/\1/P,protocol/
--regex-c=/\@property[[:space:]]+\([[:alnum:],[:space:]]+\)[[:space:]]+[[:alnum:]_]+[[:space:]]+\*?([[:alnum:]_]+)/\1/p,property/
--regex-c=/([-+])[[:space:]]*\([[:alpha:]_][^)]*\)[[:space:]]*([[:alpha:]_][^:;{]+).*/\1\2/M,method definition/
--regex-c=/^[[:space:]]*NS_ENUM\([[:alnum:]]+[[:space:]]*,[[:space:]]([[:alnum:]]+)\)/\1/e,enum/
--regex-c=/^#pragma[[:space:]]+mark[[:space:]]+-?[[:space:]]+([[:alnum:][:space:]]+)/\1/g,pragma/

--langdef=Rust
--langmap=Rust:.rs
--regex-Rust=/^[ \t]*(#\[[^\]]\][ \t]*)*(pub[ \t]+)?(extern[ \t]+)?("[^"]+"[ \t]+)?(unsafe[ \t]+)?fn[ \t]+([a-zA-Z0-9_]+)/\6/f,functions,function definitions/
--regex-Rust=/^[ \t]*(pub[ \t]+)?type[ \t]+([a-zA-Z0-9_]+)/\2/T,types,type definitions/
--regex-Rust=/^[ \t]*(pub[ \t]+)?enum[ \t]+([a-zA-Z0-9_]+)/\2/g,enum,enumeration names/
--regex-Rust=/^[ \t]*(pub[ \t]+)?struct[ \t]+([a-zA-Z0-9_]+)/\2/s,structure names/
--regex-Rust=/^[ \t]*(pub[ \t]+)?mod[ \t]+([a-zA-Z0-9_]+)/\2/m,modules,module names/
--regex-Rust=/^[ \t]*(pub[ \t]+)?(static|const)[ \t]+(mut[ \t]+)?([a-zA-Z0-9_]+)/\4/c,consts,static constants/
--regex-Rust=/^[ \t]*(pub[ \t]+)?(unsafe[ \t]+)?trait[ \t]+([a-zA-Z0-9_]+)/\3/t,traits,traits/
--regex-Rust=/^[ \t]*(pub[ \t]+)?(unsafe[ \t]+)?impl([ \t\n]*<[^>]*>)?[ \t]+(([a-zA-Z0-9_:]+)[ \t]*(<[^>]*>)?[ \t]+(for)[ \t]+)?([a-zA-Z0-9_]+)/\5 \7 \8/i,impls,trait implementations/
--regex-Rust=/^[ \t]*macro_rules![ \t]+([a-zA-Z0-9_]+)/\1/d,macros,macro definitions/

--langdef=golang
--langmap=golang:.go
--regex-golang=/func([ \t]+\([^)]+\))?[ \t]+([a-zA-Z0-9_]+)/\2/d,func/
--regex-golang=/type[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,type/

--langdef=markdown
--langmap=markdown:.md.mdown.mkdown.markdown
--regex-markdown=/^(#+[ \t]+.*)/\1/h,heading,headings/

--langdef=make
--regex-make=/^([^ \t\.]+):/\1/r,rule/

--langdef=css
--langmap=css:.css
--regex-css=/^[ \t]*\.([A-Za-z0-9_-]+)/#\1/c,class,classes/
--regex-css=/^[ \t]*#([A-Za-z0-9_-]+)/.\1/i,id,ids/
--regex-css=/^[ \t]*(([A-Za-z0-9_-]+[ \t\n,]+)+)\{/\1/t,tag,tags/
--regex-css=/^[ \t]*@media\s+([A-Za-z0-9_-]+)/\1/m,media,medias/

--regex-html=/id="([A-Za-z0-9_-]+)"/\1/i,id,ids/
--regex-html=/class="([A-Za-z0-9_-]+)"/\1/c,class,classes/

--langdef=json
--langmap=json:.json
--regex-json=/^[ \t]*"(.*)":/\1/k,key,keys/

--langdef=dlang
--langmap=dlang:.d
--regex-dlang=/[ \t]*(final)?[ \t]*(class|interface)[ \t]+([a-zA-Z0-9_]+)/\3/c,classes/
--regex-dlang=/[ \t]*(private|public|static|auto|final|const[ \t])*([a-zA-Z0-9_\.\*]*[ \t])([a-zA-Z0-9_]+)[ \s]*\(.*/\3/m,members/

--langdef=Dart                                                                                                         
--langmap=dart:.dart                                                                                                   
--regex-dart=/^[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\1/c,classes/                                                          
--regex-dart=/^[ \t]*([a-zA-Z0-9_]+)[ \t]+([a-zA-Z0-9_]+)[ \t]*\(/\2/f,function/
